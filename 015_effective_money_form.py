## 문제 015. 효율적인 화폐 구성

# N가지 종류의 화폐에 대해 화폐의 갯수를 최소한으로 이용하여 총합이 M원이 되도록 하는 프로그램을 작성하라.

# Input : 첫째 줄에 화폐의 종류 N과 원하는 총 금액 M 입력 (1 <= N <= 100, 1 <= M <= 10,000)
#         둘째 줄부터 N-1번째 줄에 각 화폐의 종류 입력, 단 10,000보다 작거나 같은 자연수
# Output : 최소 사용 화폐 갯수 출력, 단 불가능한 경우 -1 출력

n, m = map(int, input().split())
coins = []
for _ in range(n):
    coins.append(int(input()))

dp = [10001] * (m + 1)                # M원을 만들기 위해서 사용 가능한 최소 화폐 갯수
dp[0] = 0

for a in range(n):                                      # 모든 화폐 종류에 대하여
    for b in range(coins[a], m + 1):                    # 해당 화폐값부터 원하는 금액 총합까지에 대하여
        if dp[b-coins[a]] != 10001:                     # DP table이 갱신되지 않았다면
            dp[b] = min(dp[b], dp[b-coins[a]] + 1)      # 현재 확인중인 총합 금액에 필요한 최소 화폐 수
                                                        # VS (현재 확인중인 총합 금액 - 현재 확인중인 화폐의 금액)에 필요한 최소 화폐 수 + 1
print(dp[m])